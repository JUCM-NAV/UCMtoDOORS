/*************************************************************************************** 
// Author Gunter Mussbacher, May-Jul2005
// - Based on initial version by Bo Jiang
// - performs initialization and exit functions when importing a UCM file into DOORS
*/

/*************************************************************************************** 
// Author Gunter Mussbacher, May-Jul2005
// - prepares DOORS for import
//	- makes sure that the selected folder has not been chosen by accident
//	- makes sure that the UCM folder exists (sets global variable UCMFolder)
//	- opens the external modules for editing/reading
//	  (sets global variables externalModule and externalLinkModule)
//	- makes sure that all modules are closed and no modules are deleted
//	- removes all link modules
//	- makes sure that all formal modules exist
//	- opens all formal modules for editing (sets global variables deviceModule, componentModule, 
//	  responsibilityModule, mapModule, scenarioModule)
//	- creates all link modules (sets global variables hostsLinkModule, requestsLinkModule, 
//	  referencesLinkModule, refinesLinkModule, boundtoLinkModule, tracedByLinkModule)
// - halts if an error occurs or the user chooses "Quit", otherwise returns true
*/
bool beginImport( string ucmDesignName ) {
	int initOK = 1
	string buttons1[] = { "Update", "Quit" }, buttons2[] = { "Import", "Quit" }, buttons3[] = { "Ok" }
print "debug: UCM designname: " ucmDesignName "\n"

	// make sure that the UCM file is imported in the correct folder
	ucmDesignName = ucmDesignName ".ucm"
	if( folder( ucmDesignName ) )
		initOK = messageBox( "Found MATCHING UCM folder \"" ucmDesignName "\"\n\nDo you want to update the UCM modules in this folder?", buttons1, msgWarning )
	else
		initOK = messageBox( "The selected folder does not contain a UCM folder \"" ucmDesignName "\"\n\nDo you want to continue importing a new UCM design?", buttons2, msgWarning )
	if( initOK == 1 )
		halt
print "debug: correct folder\n"

	// make sure the required folder exists
	if( !( checkCreateUCMFolder( ucmDesignName, "UCM folder" ) ) ) {
		messageBox( "The UCM folder could not be created.\nImport of UCM module cannot proceed.\n", buttons3, msgError )
		halt
	}
	current = UCMFolder
print "debug: UCM folder exists\n"

	// open all external modules for reading/editing
	if( !( openExternalModules() ) ) {
		externalOK = messageBox( "One or both external modules (\"" fileNameExternal "\", \"" fileNameLinkUCMExt "\") could not be opened for reading or editing.\nImport of UCM module can proceed but will not create external links.\n\nDo you want to continue with the import?", buttons2, msgWarning )
	}
	if( externalOK == 1 )
		halt
	// check if the external attribute exists (only needs to be performed if auto-completion of links can be done)
	if( externalOK == 2 ) {
		if( !( checkExternalAttribute( externalLinkModule, attributeExternalLink ) ) ) {
			externalOK = messageBox( "The external link module (\"" fileNameLinkUCMExt "\") does not have attribute \"" attributeExternalLink "\".\nImport of UCM module can proceed but will not create external links.\n\nDo you want to continue with the import?", buttons2, msgWarning )
		}
		if( externalOK == 1 )
			halt
	}
print "debug: tried to open all external modules for reading/editing\n"

	// make sure all formal and link modules are closed
	if( !( saveCloseAllModules( UCMFolder ) ) ) {
		messageBox( "The UCM folder still contains one or more open modules.\nImport of UCM module cannot proceed.\nPlease close all open modules and start the import again.", buttons3, msgError )
		halt
	}
print "debug: all modules closed\n"

	// make sure a formal module has not been deleted
	if( !( checkDeletedUCMModules() ) ) {
		messageBox( "One or more UCM modules have been deleted.\nImport of UCM module cannot proceed.\nPlease purge or undelete the deleted UCM modules and start the import again.", buttons3, msgError )
		halt
	}
print "debug: no formal modules have been deleted\n"

	// remove all internal link modules
	if( !( removeUCMLinkModules() ) ) {
		messageBox( "One or more UCM link modules could not be removed.\nImport of UCM module cannot proceed.\nPlease remove all UCM link modules and start the import again.", buttons3, msgError )
		halt
	}
print "debug: removed all internal link modules\n"

	// make sure all required modules exist, the objects of an existing module are set to deleted and old,
	// generated external links are removed
	if( !( checkCreateUCMModules() ) ) {
		messageBox( "One or more UCM modules could not be created.\nImport of UCM module cannot proceed.\n", buttons3, msgError )
		halt
	}
print "debug: created all modules\n"

	// open all modules for editing
	if( !( openUCMModules() ) ) {
		messageBox( "One or more UCM modules could not be opened for editing.\nImport of UCM module cannot proceed.\n", buttons3, msgError )
		halt
	}
print "debug: opened all modules for editing\n"

	// create all link modules
	if( !( checkCreateUCMLinkModules() ) ) {
		messageBox( "One or more UCM link modules could not be created.\nImport of UCM module cannot proceed.\n", buttons3, msgError )
		halt
	}
print "debug: created all link modules\n"

	return true
}

/*************************************************************************************** 
// Author Gunter Mussbacher, May-Jun2005
// - removes all objects marked deleted in all formal modules
// - creates links in all link modules
// - saves and closes all formal and link modules
// - halts if an error occurs, otherwise always returns true
// - assumptions for this function
//	- all UCM formal and link modules exist and are ready to be used
*/
bool endImport() {
	string buttons[] = { "Ok" } 
	string feedback = "One or more objects could not be removed because of external links.\n\n"

	// in all formal modules, remove all objects marked deleted which are not linked to other modules
	countDeletedNotRemoved = 0
	removeDeletedObjects( deviceModule )
	if( countDeletedNotRemoved > 0 )
		feedback = feedback "in " fileNameDevices ": " countDeletedNotRemoved " object(s)\n"
	countDeletedNotRemoved = 0
	removeDeletedObjects( componentModule )
	if( countDeletedNotRemoved > 0 )
		feedback = feedback "in " fileNameComponents ": " countDeletedNotRemoved " object(s)\n"
	countDeletedNotRemoved = 0	
	removeDeletedObjects( responsibilityModule )
	if( countDeletedNotRemoved > 0 )
		feedback = feedback "in " fileNameResponsibilities ": " countDeletedNotRemoved " object(s)\n"
	countDeletedNotRemoved = 0
	removeDeletedObjects( mapModule )
	if( countDeletedNotRemoved > 0 )
		feedback = feedback "in " fileNameMaps ": " countDeletedNotRemoved " object(s)\n"
	countDeletedNotRemoved = 0
	removeDeletedObjects( scenarioModule )
	if( countDeletedNotRemoved > 0 )
		feedback = feedback "in " fileNameScenarios ": " countDeletedNotRemoved " object(s)\n"
	if( feedback != "One or more objects could not be removed because of external links.\n\n" )
		messageBox( feedback, buttons, msgWarning)
print "debug: removed all deleted objects\n"

	// create links in all link modules
	createMapLinks()
	createScenarioLinks()
	createDeviceLinks()
print "debug: created links\n"

	// save and close all formal and link modules (external and UCM)
	if( !( saveCloseFinal() ) ) {
		messageBox( "The UCM import has finished.\n\nOne or more of the modules in the UCM folder or the external modules are still open.\nPlease manually save and close all open formal and link modules.", buttons, msgWarning)
		halt
	}
print "debug: saved and closed\n"

	return true
}

/***************************************************************************************
// Author Gunter Mussbacher, May-Jun2005
// - Based on initial version by Bo Jiang
// - general assumptions
//	- scenarioModule exists and is ready to be used
*/
// global variables, only used within this file
Object currentScenarioGroupObject
Object currentScenarioObject
Object lastScenarioElementObject

/***************************************************************************************
// Author Gunter Mussbacher, May2005
// - imports scenario group (updates object if it exists otherwise creates new one)
// - sets currentScenarioGroupObject
// - always returns true
*/
bool scenarioGroup( string name, string ID, string theDescription ) {
	Object foundObject, lastScenarioGroupObject

	foundObject = findObject( ID, scenarioModule )
	if ( null foundObject ) {
		// cannot assume that the current module is scenarioModule, needs to be set explicitly
		current = scenarioModule
		if( null( last scenarioModule ) ) 
			foundObject = create scenarioModule
		else {
			lastScenarioGroupObject = findAncestorOfType( "scenarioGroup", last scenarioModule )
			foundObject = create lastScenarioGroupObject 
		}
		foundObject."ID" = ID
		foundObject."Object Heading" = name
		foundObject."Name_" = name
		foundObject."Type" = "scenarioGroup" 
		foundObject."Description_" = theDescription      
		foundObject."New" = true
		foundObject."Deleted" = false 
	}
	else {
		if( foundObject."Name_" "" != name ) {
			foundObject."Object Heading" = name         
			foundObject."Name_" = name    
		}
		if( foundObject."Description_" "" != theDescription )
			foundObject."Description_" = theDescription    
		foundObject."Deleted" = false
	}
	currentScenarioGroupObject = foundObject
	debug("imported scenarioGroup " foundObject."ID" "\n", 3)
	return true
}

/*************************************************************************************** 
// Author Gunter Mussbacher, May2005
// - imports scenario (updates object if it exists otherwise creates new one)
// - sets global variables currentScenarioObject, lastScenarioElementObject
// - always returns true
// - assumptions for this function
//	- the dxl file generated by UCMNav is well-formed (if G is the last executed scenarioGroup and S
//	  is the currently executed scenario, then G contains S)
*/
bool scenario( string name, string ID, string theDescription ) {
	Object foundObject

	foundObject = findObject( ID, scenarioModule )
	if ( null foundObject ) {
		// cannot assume that the current module is scenarioModule, needs to be set explicitly
		current = scenarioModule
		foundObject = create last below currentScenarioGroupObject
		foundObject."ID" = ID
		foundObject."Object Heading" = name
		foundObject."Name_" = name
		foundObject."Type" = "scenario"
		foundObject."Description_" = theDescription      
		foundObject."New" = true
		foundObject."Deleted" = false 
	}
	else {
		// since the ID includes the name of the scenarioGroup, an existing scenario never needs to be 
		// moved under a new scenarioGroup. if the ID format changes, moving will have to be considered.
		if( foundObject."Name_" "" != name ) {
			foundObject."Object Heading" = name           
			foundObject."Name_" = name    
		}
		if( foundObject."Description_" "" != theDescription )
			foundObject."Description_" = theDescription    
		foundObject."Deleted" = false
	}
	currentScenarioObject = foundObject
	lastScenarioElementObject = foundObject
	debug("imported scenario " foundObject."ID" "\n", 3)
	return true
}

/*************************************************************************************** 
// Author Gunter Mussbacher, May2005
// - imports seq (always creates new object)
// - sets lastScenarioElementObject 
// - always returns true
// - assumptions for this function
//	- the dxl file generated by UCMNav is well-formed (if A is the object with parentID and S is the currently 
//	  executed seq, then A was already executed)
*/
bool seq( string ID, string parentID ) {
	Object ancestorObject, newObject

	ancestorObject = findAncestor( parentID, lastScenarioElementObject )
	// cannot assume that the current module is scenarioModule, needs to be set explicitly
	current = scenarioModule
	newObject = create last below ancestorObject
	newObject."ID" = ID
	newObject."Object Heading" = ID
	newObject."Type" = "seq" 
	newObject."Parent ID" = parentID
	newObject."New" = true
	newObject."Deleted" = false 
	lastScenarioElementObject = newObject
	debug("imported seq " newObject."ID" "\n", 3)
	return true
}

/*************************************************************************************** 
// Author Gunter Mussbacher, May2005
// - imports par (always creates new object)
// - sets lastScenarioElementObject 
// - always returns true
// - assumptions for this function
//	- the dxl file generated by UCMNav is well-formed (if A is the object with parentID and P is the currently 
//	  executed par, then A was already executed)
*/
bool par( string ID, string parentID ) {
	Object ancestorObject, newObject

	ancestorObject = findAncestor( parentID, lastScenarioElementObject )
	// cannot assume that the current module is scenarioModule, needs to be set explicitly
	current = scenarioModule
	newObject = create last below ancestorObject
	newObject."ID" = ID
	newObject."Object Heading" = ID
	newObject."Type" = "par" 
	newObject."Parent ID" = parentID
	newObject."New" = true
	newObject."Deleted" = false 
	lastScenarioElementObject = newObject
	debug("imported par " newObject."ID" "\n", 3)
	return true
}

/*************************************************************************************** 
// Author Gunter Mussbacher, May-Jun2005
// - imports doElement (always creates new object)
// - sets lastScenarioElementObject 
// - always returns true
// - assumptions for this function
//	- the dxl file generated by UCMNav is well-formed (if A is the object with parentID and D is the currently 
//	  executed doElement, then A was already executed)
//	- the dxl file generated by UCMNav is well-formed (if S is the last executed scenario object and D is the currently 
//	  executed doElement, then D is part of S)
*/
bool doElement( string ID, string name, string doType, string theDescription, string componentReferenceName, string componentReferenceID, string componentRole, string parentID ) {
	Object ancestorObject, newObject

	// translate doType from UCMNav style to DOORS style
	if( doType == "Start" )
		doType = "start"
	if( doType == "End_Point" )
		doType = "endPoint"
	if( doType == "WP_Enter" )
		doType = "wpEnter"
	if( doType == "WP_Leave" )
		doType = "wpLeave"
	if( doType == "Timer_Set" )
		doType = "timerSet"
	if( doType == "Timer_Reset" )
		doType = "timerReset"
	if( doType == "Time_Out" )
		doType = "timeOut"
	if( doType == "And_join" )
		doType = "andJoin"
	if( doType == "Resp" )
		doType = "resp"
	if( doType == "Waiting_place" )
		doType = "waitingPlace"
	if( doType == "Fork" )
		doType = "fork"
	if( doType == "Connect_Start" )
		doType = "connectStart"
	if( doType == "Connect_End" )
		doType = "connectEnd"
	if( doType == "Trigger_End" )
		doType = "triggerEnd"
	ancestorObject = findAncestor( parentID, lastScenarioElementObject )
	// cannot assume that the current module is scenarioModule, needs to be set explicitly
	current = scenarioModule
	newObject = create last below ancestorObject
	newObject."ID" = ID
	if( doType == "resp" )
		newObject."Object Heading" = currentScenarioObject."Object Heading" "." name
	else
		newObject."Object Heading" = name
	newObject."Type" = "do" 
	newObject."Parent ID" = parentID
	newObject."Name_" = name
	newObject."Do Type" = doType
	newObject."Description_" = theDescription         
	newObject."Component Reference Name" = componentReferenceName
	newObject."Component Reference ID" = componentReferenceID
	newObject."Component Role" = componentRole
	newObject."New" = true
	newObject."Deleted" = false
	lastScenarioElementObject = newObject
	debug("imported doElement " newObject."ID" "\n", 3)
	return true
}

/*************************************************************************************** 
// Author Gunter Mussbacher, May2005
// - imports condition (always creates new object)
// - sets lastScenarioElementObject 
// - always returns true
// - assumptions for this function
//	- the dxl file generated by UCMNav is well-formed (if A is the object with parentID and C is the currently 
//	  executed condition, then A was already executed)
*/
bool condition( string ID, string label, string expression, string parentID ) {
	Object ancestorObject, newObject

	ancestorObject = findAncestor( parentID, lastScenarioElementObject )
	// cannot assume that the current module is scenarioModule, needs to be set explicitly
	current = scenarioModule
	newObject = create last below ancestorObject
	newObject."ID" = ID
	newObject."Object Heading" = label
	newObject."Type" = "condition" 
	newObject."Parent ID" = parentID
	newObject."Label" = label
	newObject."Expression" = expression
	newObject."New" = true
	newObject."Deleted" = false
	lastScenarioElementObject = newObject
	debug("imported condition " newObject."ID" "\n", 3)
	return true
}

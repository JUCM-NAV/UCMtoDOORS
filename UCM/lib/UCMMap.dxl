/*************************************************************************************** 
// Author Gunter Mussbacher, May-Aug2005
// - Based on initial version by Bo Jiang
// - general assumptions
//	- mapModule exists and is ready to be used
*/
// global variables, used only within this file
Object currentMapObject

/*************************************************************************************** 
// Author Gunter Mussbacher, May2005
// - imports map (updates object if it exists otherwise creates new one)
// - sets currentMapObject
// - always returns true
// - assumptions for this function
//	- there are only two outline levels in mapModule (the first for maps, the second for map elements)
*/
bool map( string modelID, string modelName, string graphFileName, string title, string theDescription ) {
	Object foundObject, lastMapObject

	foundObject = findObject( modelID, mapModule )
	if ( null foundObject ) {
		// cannot assume that the current module is mapModule, needs to be set explicitly
		current = mapModule
		// the picture needs to be inserted first, if another attribute is assigned before
		// that the picture cannot be added anymore
		if( null( last mapModule ) ) 
			insertPictureFileAfter( graphFileName, formatBMP, null )
		else {
			lastMapObject = findAncestorOfType( "map", last mapModule )
			insertPictureFileAfter( graphFileName, formatBMP, lastMapObject )
		}
		foundObject = last mapModule
		foundObject."ID" = modelID
		foundObject."Object Heading" = modelName
		foundObject."Name_" = modelName        
		foundObject."Type" = "map"         
		foundObject."Map File Name" = graphFileName
		foundObject."Map Title" = title       
		foundObject."Description_" = theDescription       
		foundObject."New" = true
		foundObject."Deleted" = false
	}
	else {
		if( foundObject."Name_" "" != modelName ) {
			foundObject."Object Heading" = modelName   
			foundObject."Name_" = modelName
		}   
		if( foundObject."Map File Name" "" != graphFileName )
			foundObject."Map File Name" = graphFileName
		if( foundObject."Map Title" "" != title )
			foundObject."Map Title" = title   
		if( foundObject."Description_" "" != theDescription )
			foundObject."Description_" = theDescription               
		// always insert the BMP file as it may have changed
		insertPictureFile( graphFileName, formatBMP, foundObject )		
		foundObject."Deleted" = false                 
	}
	currentMapObject = foundObject
print "debug: imported map " foundObject."ID" "\n"
	return true
}

/*************************************************************************************** 
// Author Gunter Mussbacher, May-Aug2005
// - imports responsibility reference (updates object if it exists otherwise creates new one)
// - always returns true
// - assumptions for this function
//	- the dxl file generated by UCMNav is well-formed (if M is the last executed map and E 
//	  is the currently executed map element, then E is a map element of M)
*/
bool respRef( string hyperedgeID, int fx, int fy, string enclosingComponent, string respID, string name, string theDescription) {
	Object foundObject
	int i

	foundObject = findObject( hyperedgeID, mapModule )
	if ( null foundObject ) {
		// cannot assume that the current module is mapModule, needs to be set explicitly
		current = mapModule
		foundObject = create last below currentMapObject
		foundObject."ID" = hyperedgeID
		foundObject."Object Heading" = currentMapObject."Name_" "." name
		foundObject."Name_" = name   
		foundObject."Type" = "respRef" 
		foundObject."Fx" = fx
		foundObject."Fy" = fy      
		foundObject."Enclosing Component" = enclosingComponent                    
		foundObject."Definition ID" = respID
		foundObject."Description_" = theDescription              
		foundObject."New" = true
		foundObject."Deleted" = false
	}        
	else {
		if( foundObject."Object Heading" "" != currentMapObject."Name_" "." name ) {
			foundObject."Object Heading" = currentMapObject."Name_" "." name
		}
		if( foundObject."Name_" "" != name ) {
			foundObject."Name_" = name
		}
		if( parent( foundObject ) != currentMapObject ) {
			move( foundObject, below currentMapObject )
		}
		i = foundObject."Fx"
		if( i != fx )
			foundObject."Fx" = fx
		i = foundObject."Fy"             
		if( i != fy )
			foundObject."Fy" = fy
		if( foundObject."Enclosing Component" "" != enclosingComponent )
			foundObject."Enclosing Component" = enclosingComponent         
		if( foundObject."Definition ID" "" != respID )
			foundObject."Definition ID" = respID            
		if( foundObject."Description_" "" != theDescription )
			foundObject."Description_" = theDescription            
		foundObject."Deleted" = false
	}
print "debug: imported respRef " foundObject."ID" "\n"
	return true
}

/*************************************************************************************** 
// Author Gunter Mussbacher, May-Aug2005
// - imports component reference (updates object if it exists otherwise creates new one)
// - always returns true
// - assumptions for this function
//	- the dxl file generated by UCMNav is well-formed (if M is the last executed map and E 
//	  is the currently executed map element, then E is a map element of M)
*/
bool compRef( string componentRefID, int fx, int fy, int width, int height, string anchored, string referencedComponent, string name, string role, string parentComponent ) {
	Object foundObject
	int i

	foundObject = findObject( componentRefID, mapModule )
	if ( null foundObject ) {
		// cannot assume that the current module is mapModule, needs to be set explicitly
		current = mapModule
		foundObject = create last below currentMapObject
		foundObject."ID" = componentRefID
		foundObject."Object Heading" = currentMapObject."Name_" "." name
		foundObject."Name_" = name        
		foundObject."Type" = "compRef" 
		foundObject."Fx" = fx         
		foundObject."Fy" = fy      
		foundObject."Width" = width         
		foundObject."Height" = height 
		foundObject."Anchored" = anchored         
		foundObject."Definition ID" = referencedComponent
		foundObject."Component Role" = role         
		foundObject."Parent Component" = parentComponent             
		foundObject."New" = true
		foundObject."Deleted" = false
	}        
	else {
		if( foundObject."Object Heading" "" != currentMapObject."Name_" "." name ) {
			foundObject."Object Heading" = currentMapObject."Name_" "." name
		}
		if( foundObject."Name_" "" != name ) {
			foundObject."Name_" = name
		}
		if( parent( foundObject ) != currentMapObject ) {
			move( foundObject, below currentMapObject )
		}
		i = foundObject."Fx"
		if( i != fx )
			foundObject."Fx" = fx
		i = foundObject."Fy"             
		if( i != fy )
			foundObject."Fy" = fy
		i = foundObject."Width"
		if( i != width )
			foundObject."Width" = width
		i = foundObject."Height"             
		if( i != height )
			foundObject."Height" = height            
		if( foundObject."Anchored" "" != anchored )
			foundObject."Anchored" = anchored
		if( foundObject."Definition ID" "" != referencedComponent )
			foundObject."Definition ID" = referencedComponent            
		if( foundObject."Component Role" "" != role )
			foundObject."Component Role" = role       
		if( foundObject."Parent Component" "" != parentComponent )
			foundObject."Parent Component" = parentComponent             
		foundObject."Deleted" = false             
	}
print "debug: imported compRef " foundObject."ID" "\n"
	return true
}

/*************************************************************************************** 
// Author Gunter Mussbacher, May-Aug2005
// - imports stub (updates object if it exists otherwise creates new one)
// - always returns true
// - assumptions for this function
//	- the dxl file generated by UCMNav is well-formed (if M is the last executed map and E 
//	  is the currently executed map element, then E is a map element of M)
*/
bool stub( string hyperedgeID, int fx, int fy, string name, string stubType, string submapID ) {
	Object foundObject
	int i

	foundObject = findObject( hyperedgeID, mapModule )
	if ( null foundObject ) {
		// cannot assume that the current module is mapModule, needs to be set explicitly
		current = mapModule
		foundObject = create last below currentMapObject
		foundObject."ID" = hyperedgeID
		foundObject."Object Heading" = currentMapObject."Name_" "." name
		foundObject."Name_" = name          
		foundObject."Type" = "stub" 
		foundObject."Fx" = fx         
		foundObject."Fy" = fy      
		foundObject."Stub Type" = stubType         
		foundObject."Plugins" = submapID         
		foundObject."New" = true
		foundObject."Deleted" = false
	}        
	else {
		if( foundObject."Object Heading" "" != currentMapObject."Name_" "." name ) {
			foundObject."Object Heading" = currentMapObject."Name_" "." name
		}
		if( foundObject."Name_" "" != name ) {
			foundObject."Name_" = name
		}
		if( parent( foundObject ) != currentMapObject ) {
			move( foundObject, below currentMapObject )
		}
		i = foundObject."Fx"
		if( i != fx )
			foundObject."Fx" = fx
		i = foundObject."Fy"             
		if( i != fy )
			foundObject."Fy" = fy      
		if( foundObject."Stub Type" "" != stubType )
			foundObject."Stub Type" = stubType
		if( foundObject."Plugins" "" != submapID )
			foundObject."Plugins" = submapID            
		foundObject."Deleted" = false             
	}
print "debug: imported stub " foundObject."ID" "\n"
	return true
}
